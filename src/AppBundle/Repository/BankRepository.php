<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \Gedmo\Translatable\TranslatableListener;

/**
 * BankRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BankRepository extends EntityRepository
{
    
    public function findLoansByInputFields($currency_id = null, $loan_group_id = null, $loan_terms_min = null, $loan_min = 0, $customer_type = null){
        
        $em = $this->getEntityManager();

        $where  = "";
        $loan_min_where = "";
        $loan_terms_where = "";
        
        if ($loan_min == null){ 
            $loan_min = 0;
        } else {
            $where = "WHERE ";
            $loan_min_where = "T.loan_min * rate_CB_min <= {$loan_min} AND T.loan_max * rate_CB_max >= {$loan_min}";
        }
        
        if($loan_terms_min !== null){
            $loan_terms_where = " AND l.loan_terms_min <= {$loan_terms_min} AND l.loan_terms_max >= {$loan_terms_min}";
        }

        $sql = "SELECT
            T. loan_min * rate_CB_min AS loan_min_amd, 
            T. loan_max * rate_CB_max AS loan_max_amd, 
            getCurrencyTitle(T.loan_currency_min) as loan_currency_min_title,
            getCurrencyTitle(T.loan_currency_max) as loan_currency_max_title, 
            T.* FROM (SELECT
                confirmCurr(l.`loan_currency_min`, l.`currency_id`) AS rate_CB_min,
                confirmCurr(l.`loan_currency_max`, l.`currency_id`) AS rate_CB_max,
                l.loan_id, 
                l.currency_id, 
                c.currency_symbol,
                l.bank_id,
                b.bank_title,
                b.bank_slug,
                l.loan_order, 
                l.loan_customer_type, 
                l.loan_title, 
                l.loan_min,
                l.loan_currency_min,
                l.loan_max,
                l.loan_currency_max, 
                l.loan_terms_min,
                l.loan_terms_max,
                l.loan_deposit_percent_min,
                l.loan_deposit_percent_max,
                l.loan_percent_min,
                l.loan_percent_max,
                l.loan_percent_subsidized,
                l.loan_description,
                l.loan_link,
                l.loan_update_date,
                case when l.loan_percent_min is null or l.loan_percent_min = 'Մինչև' then l.loan_percent_max else l.loan_percent_min end as loan_rate_order
          FROM
            loans l 
            INNER JOIN banks b ON (l.bank_id = b.bank_id)
            INNER JOIN currencies c ON (l.currency_id = c.currency_id)
            WHERE (".$currency_id." = 59 AND l.loan_equivalent_amd = 1 OR l.currency_id = ".$currency_id." AND (l.loan_equivalent_amd is null or l.loan_equivalent_amd = 0)) AND l.loan_customer_type = ".$customer_type." ".$loan_terms_where." AND l.loan_group_id = ".$loan_group_id." AND l.loan_customer_type = ".$customer_type." AND l.loan_group_id = ".$loan_group_id." {$loan_terms_where})
            AS T 
             ".$where." ".$loan_min_where." ORDER BY T.loan_rate_order ASC";
             
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
        
    }
    
    public function findTransfersByInputFields($country_id = null, $transfer_type_id = null, $transfer_amount = null, $currency_id = null){
        
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                'SELECT 
                  t.transferId,
                  b.bankId,
                  b.bankSlug,
                  b.bankTitle,
                  tt.transferTypeId,
                  tt.transferTypeTitle,
                  c.currencyId,
                  c.currencySymbol,
                  tcu.transferCurrencyMin,
                  tcu.transferCurrencyMax,
                  t.transferComMin,
                  t.transferComPercent,
                  t.transferSpeedMinute,
                  t.transferDescription,
                  t.transferLink,
                  t.transferUpdateDate,
                  tcu.transferCurrencyIo
                FROM
                  AppBundle:Bank b 
                  INNER JOIN AppBundle:Transfer t WITH (t.bankId = b.bankId)
                  INNER JOIN AppBundle:TransferType tt WITH (t.transferTypeId = tt.transferTypeId)
                  INNER JOIN AppBundle:CountryTransfer ct WITH (ct.transferId = t.transferId)
                  INNER JOIN AppBundle:TransferCurrency tcu WITH (tcu.transferId = t.transferId) AND (tcu.currencyId = :currency_id) AND (tcu.transferCurrencyIo = 0)
                  INNER JOIN AppBundle:Currency c WITH (c.currencyId = tcu.currencyId)
                WHERE 
                  tcu.transferCurrencyMin <= :transfer_amount AND
                  tcu.transferCurrencyMax >= :transfer_amount AND
                  t.transferTypeId = :transfer_type_id AND 
                  ct.countryId = :country_id AND t.transferTypeId <> 10 AND t.transferTypeId <> 11 AND t.transferTypeId <> 12'
            );

        $params = $query
            ->setParameter('currency_id', $currency_id)
            ->setParameter('transfer_amount', $transfer_amount)
            ->setParameter('transfer_type_id', $transfer_type_id)
            ->setParameter('transfer_amount', $transfer_amount)
            ->setParameter('country_id', $country_id);
        
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            'en' // take locale from session or request etc.
        );
        
        $result = $query->getResult();
        return $result;
        
    }
    
    public function findSwiftTransfersByInputFields($transfer_type_id = null, $currency_id = null){
        
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                'SELECT 
                  t.transferId,
                  b.bankId,
                  b.bankSlug,
                  b.bankTitle,
                  tt.transferTypeId,
                  tt.transferTypeTitle,
                  c.currencyId,
                  c.currencySymbol,
                  tcu.transferCurrencyMin,
                  tcu.transferCurrencyMax,
                  t.transferComMin,
                  t.transferComMax,
                  t.transferComPercent,
                  t.transferSpeedMinute,
                  t.transferOtherConditions,
                  t.transferDescription,
                  t.transferLink,
                  t.transferUpdateDate
                FROM
                  AppBundle:Bank b 
                  INNER JOIN AppBundle:Transfer t WITH (t.bankId = b.bankId)
                  INNER JOIN AppBundle:TransferType tt WITH (t.transferTypeId = tt.transferTypeId)
                  INNER JOIN AppBundle:TransferCurrency tcu WITH (tcu.transferId = t.transferId) AND (tcu.currencyId = :currency_id)
                  INNER JOIN AppBundle:Currency c WITH (c.currencyId = tcu.currencyId)
                  WHERE 
                  t.transferTypeId = :transfer_type_id'
            );

        $params = $query
            ->setParameter('currency_id', $currency_id)
            ->setParameter('transfer_type_id', $transfer_type_id);

        $result = $query->getResult();
        return $result;
        
    }
    
    public function findWalletRatesByInputFields($wallet_id){
        
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                'SELECT 
                  b.bankId,
                  b.bankSlug,
                  b.bankTitle,
                  ew.ewalletTitle,
                  ewr.ewalletRateId,
                  ewr.ewalletRateRefill,
                  ewr.ewalletRateWithdraw,
                  ewr.ewalletRateLink,
                  ewr.ewalletRateUpdateDate
                FROM
                  AppBundle:Bank b 
                  INNER JOIN AppBundle:EwalletRate ewr WITH (ewr.bankId = b.bankId)
                  INNER JOIN AppBundle:Ewallet ew WITH (ew.ewalletId = ewr.ewalletId)
                  WHERE 
                  ewr.ewalletId = :walletId'
            );

        $params = $query->setParameter('walletId', $wallet_id);

        $result = $query->getResult();
        return $result;
        
    }
    
    public function getLatestRates(){
        $em = $this->getEntityManager();
        $sql = "SELECT * FROM rates_current r WHERE r.rate_update_date = (SELECT rd.rate_update_date FROM rates_current rd WHERE rd.bank_id <> 13 ORDER BY rd.rate_update_date DESC LIMIT 1)
                    UNION
                SELECT * FROM rates_current r WHERE r.bank_id = 13 AND r.currency_id = 1 AND r.rate_update_date = (SELECT rud.rate_update_date FROM rates_current rud WHERE rud.bank_id = 13 AND rud.currency_id = 1 ORDER BY rud.rate_update_date DESC LIMIT 1)
                    UNION
                SELECT * FROM rates_current r WHERE r.bank_id = 13 AND r.currency_id = 10 AND r.rate_update_date = (SELECT rud.rate_update_date FROM rates_current rud WHERE rud.bank_id = 13 AND rud.currency_id = 10 ORDER BY rud.rate_update_date DESC LIMIT 1)
                    UNION
                SELECT * FROM rates_current r WHERE r.bank_id = 13 AND r.currency_id = 51 AND r.rate_update_date = (SELECT rud.rate_update_date FROM rates_current rud WHERE rud.bank_id = 13 AND rud.currency_id = 51 ORDER BY rud.rate_update_date DESC LIMIT 1)
                    UNION
                SELECT * FROM rates_current r WHERE r.bank_id = 13 AND r.currency_id = 2 AND r.rate_update_date = (SELECT rud.rate_update_date FROM rates_current rud WHERE rud.bank_id = 13 AND rud.currency_id = 2 ORDER BY rud.rate_update_date DESC LIMIT 1)";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $latestRatesByBanks = $stmt->fetchAll();
        return $latestRatesByBanks;
    }

}
