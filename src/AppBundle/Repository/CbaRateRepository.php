<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CbaRateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CbaRateRepository extends EntityRepository
{
    
    public function findLatestCbaRates($dayBefore = null){
        
        $em = $this->getEntityManager();
        
        $query = $em->createQuery('SELECT 
                    cr
                FROM
                    AppBundle:CbaRate cr
                    INNER JOIN AppBundle:Currency cur WITH (cr.cbaRateCurrencyIso = cur.currencySymbol)
                WHERE 
                        cr.cbaRateRate <> 0 AND
                        cr.cbaRateUpdateDate = (
                            SELECT 
                                MAX(c.cbaRateUpdateDate) 
                            FROM 
                                AppBundle:CbaRate c 
                            WHERE 
                                c.cbaRateUpdateDate < :dayBefore OR :dayBefore IS NULL
                            ORDER BY 
                                c.cbaRateUpdateDate DESC)
                ORDER BY 
                        cr.cbaRateUpdateDate DESC,
                        cur.currencyOrder ASC');
        $query
                ->setParameter('dayBefore', $dayBefore)
                ->setMaxResults(7)
                
                ;
        
        $result = $query->getResult();
        return $result;
        
    }
    
    public function findCbaRatesByDateRangeAndCurrency($dateStart = null, $dateEnd = null, $currencySymbol = null){
        
        $em = $this->getEntityManager();
        
        $sql = "SELECT 
                DAY(c.cba_rate_update_date) as 'day',
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '01' THEN c.cba_rate_rate END) AS mn_1,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '02' THEN c.cba_rate_rate END) AS mn_2,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '03' THEN c.cba_rate_rate END) AS mn_3,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '04' THEN c.cba_rate_rate END) AS mn_4,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '05' THEN c.cba_rate_rate END) AS mn_5,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '06' THEN c.cba_rate_rate END) AS mn_6,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '07' THEN c.cba_rate_rate END) AS mn_7,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '08' THEN c.cba_rate_rate END) AS mn_8,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '09' THEN c.cba_rate_rate END) AS mn_9,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '10' THEN c.cba_rate_rate END) AS mn_10,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '11' THEN c.cba_rate_rate END) AS mn_11,
                MAX(CASE WHEN MONTH(c.cba_rate_update_date) = '12' THEN c.cba_rate_rate END) AS mn_12
              FROM
                cba_rates c 
              WHERE 
                c.cba_rate_update_date >= '{$dateStart}' AND 
                c.cba_rate_update_date < '{$dateEnd}' AND 
                c.cba_rate_currency_iso = '{$currencySymbol}' 
              GROUP BY 
                DAY(c.cba_rate_update_date)";
        
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result;
        
    }

    public function getLatestNotNullRate($dateStart = null, $dateEnd = null, $currencySymbol = null){

        $em = $this->getEntityManager();

        $sql = "SELECT
                  * 
                FROM
                  cba_rates c 
                WHERE 
                  c.cba_rate_update_date < '{$dateEnd}'
                  AND c.cba_rate_update_date >= '{$dateStart}'
                  AND c.cba_rate_currency_iso = '{$currencySymbol}' 
                  AND c.`cba_rate_rate` IS NOT NULL
                GROUP BY c.cba_rate_update_date DESC
                LIMIT 1";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;

    }


    
}
